import unittest
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import page
import warnings
from selenium.common.exceptions import StaleElementReferenceException

class PythonOrgSearch(unittest.TestCase):

    def setUp(self):
        warnings.filterwarnings(action="ignore", message="unclosed", category=ResourceWarning)
        self.options = webdriver.ChromeOptions()
        self.options.add_argument('--ignore-certificate-errors')
        self.options.add_argument('--allow-running-insecure-content')
        self.options.add_experimental_option('detach', True)
        self.driver = webdriver.Chrome(options=self.options)
        self.url = "https://gbox-platform.vercel.app"
        
    def sign_in(self):
        self.driver.get(f"{self.url}/sign-in")
        mainPage = page.loginPage(self.driver)
        assert mainPage.is_title_matches("sign-in")
        # nhap username va password
        mainPage.search_username_element = "tronglinh230203@gmail.com"
        mainPage.search_password_element = "Linh123456@"
        mainPage.submit()
        WebDriverWait(mainPage.driver, 10).until(EC.url_to_be(f"{self.url}/"))
        result = page.resultsAfter(self.driver)
        assert result.is_login() == True
        return True
        
    def test_sign_in_success(self):
        assert self.sign_in() == True
        print("Login success!")
        
    def test_sign_in_fail(self):
        self.driver.get(f"{self.url}/sign-in")
        mainPage = page.loginPage(self.driver)
        assert mainPage.is_title_matches("sign-in")
        # nhap username va password
        mainPage.search_username_element = "tronglinh230203@gmail.com"
        mainPage.search_password_element = "Linh123456@1"
        mainPage.submit()
        WebDriverWait(mainPage.driver, 10).until(
            EC.text_to_be_present_in_element((By.TAG_NAME, "body"), "Please check your email and password")
        )
        result = page.resultsAfter(self.driver)
        assert result.is_login() == False
        print("Login Fail!")

    def test_sign_up_success(self):
        self.driver.get(f"{self.url}/sign-up")
        mainPage = page.signUpPage(self.driver)
        assert mainPage.is_title_matches("sign-up")
        # nhap email va 2 lan mat khau
        mainPage.search_email_element = "yayinoh100@cabose.com"
        mainPage.search_password_element = "123456@Linh"
        mainPage.search_cfpassword_element = "123456@Linh"
        mainPage.submit()
        WebDriverWait(mainPage.driver, 10).until(EC.url_to_be(f"{self.url}/"))
        result = page.resultsAfter(self.driver)
        assert result.is_sign_up_success() == True
        print("Sign up success!")
    
    def test_sign_up_fail_1(self):
        self.driver.get(f"{self.url}/sign-up")
        mainPage = page.signUpPage(self.driver)
        assert mainPage.is_title_matches("sign-up")
        # nhap email da ton tai
        mainPage.search_email_element = "yayinoh100@cabose.com"
        mainPage.search_password_element = "123456@Linh"
        mainPage.search_cfpassword_element = "123456@Linh"
        mainPage.submit()
        WebDriverWait(mainPage.driver, 10).until(
            EC.text_to_be_present_in_element((By.TAG_NAME, "body"), "User already registered")
        )
        result = page.resultsAfter(self.driver)
        assert result.is_sign_up_success() == False
        print("Sign up fail!")
        
    def test_sign_up_fail_2(self):
        self.driver.get(f"{self.url}/sign-up")
        mainPage = page.signUpPage(self.driver)
        assert mainPage.is_title_matches("sign-up")
        # nhap password khong khop
        mainPage.search_email_element = "yayinoh100@cabose.com"
        mainPage.search_password_element = "123456@Linh"
        mainPage.search_cfpassword_element = "123456@Linh123"
        mainPage.submit()
        WebDriverWait(mainPage.driver, 10).until(
            EC.text_to_be_present_in_element((By.TAG_NAME, "body"), "Passwords don't match")
        )
        result = page.resultsAfter(self.driver)
        assert result.is_sign_up_success() == False
        print("Sign up fail!")
    
    
    def test_send_request_friend(self):
        assert self.sign_in() == True
        self.driver.get(f"{self.url}/user/thanhdung0207")
        mainPage = page.profilePage(self.driver)
        mainPage.click_button()  
    
    
    
    def tearDown(self):
        self.driver.close()

if __name__ == "__main__":
    unittest.main()


# import unittest
# from selenium import webdriver
# from selenium.webdriver.common.keys import Keys
# from selenium.webdriver.common.by import By
# from selenium.webdriver.chrome.options import Options

# options = Options()
# options.add_argument('--ignore-certificate-errors')

# class PythonOrgSearch(unittest.TestCase):

#   def setUp(self):
#     self.driver = webdriver.Chrome(options=options)

#   def test_search_in_python_org(self):
#     driver = self.driver
#     driver.get("http://www.python.org")
#     self.assertIn("Python", driver.title)
#     elem = driver.find_element(By.NAME, "q")
#     elem.send_keys("pyconaaaaaaaaaaaaaaa")
#     elem.send_keys(Keys.RETURN)
#     self.assertNotIn("No results found.", driver.page_source)


#   def tearDown(self):
#     self.driver.close()

# if __name__ == "__main__":
#   unittest.main()



# # from selenium import webdriver
# # from selenium.webdriver.common.keys import Keys
# # from selenium.webdriver.common.by import By
# # from selenium.webdriver.support.ui import WebDriverWait
# # from selenium.webdriver.support import expected_conditions as EC
# # import time

# # # PATH = "C:\Program Files (x86)\chromedriver.exe"
# # options = webdriver.ChromeOptions()
# # options.add_experimental_option('detach', True)


# # driver = webdriver.Chrome(options=options)
# # driver.get("https://techwithtim.net")
# # print(driver.title)

# # search = driver.find_element(By.ID, "gtag")
# # print(search.text)
# # search.send_keys("test")
# # search.send_keys(Keys.RETURN)

# # try:
# #   main = WebDriverWait(driver, 10).until(
# #     EC.presence_of_element_located((By.ID, "main"))
# #   )
# #   print(main.text)
# #   articles = driver.find_elements_by_tag_name("article")
# #   for article in articles:
# #     header = article.find_element_by_class_name("entry-summary")
# #     print(header.text)
# # except:
# #   driver.quit()




import unittest
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By

class PythonOrgSearch(unittest.TestCase):

    def setUp(self):
        self.options = webdriver.ChromeOptions()
        self.options.add_argument('--ignore-certificate-errors')
        self.driver = webdriver.Chrome(options=self.options)

    def test_search_in_python_org(self):
        driver = self.driver
        driver.get("http://www.python.org")
        self.assertIn("Python", driver.title)
        elem = driver.find_element(By.NAME, "q")
        elem.send_keys("pycon")
        elem.send_keys(Keys.RETURN)
        self.assertNotIn("No results found.", driver.page_source)


    def tearDown(self):
        self.driver.close()

if __name__ == "__main__":
    unittest.main()


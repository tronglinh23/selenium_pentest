import unittest
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

class PythonOrgSearch(unittest.TestCase):

    def setUp(self):
        self.options = webdriver.ChromeOptions()
        self.options.add_argument('--ignore-certificate-errors')
        self.options.add_argument('--allow-running-insecure-content')
        self.options.add_experimental_option('detach', True)
        self.driver = webdriver.Chrome(options=self.options)
        self.url = "https://gbox-platform.vercel.app"

    def test_sign_in_success(self):
        driver = self.driver
        driver.get(f"{self.url}/sign-in")
        self.assertIn("Gbox", driver.title)
        
        # nhap username va password
        username = driver.find_element(By.ID, ":R2rbrrpla:-form-item")
        password = driver.find_element(By.ID, ":R4rbrrpla:-form-item")
        username.send_keys("tronglinh230203@gmail.com")
        password.send_keys("Linh123456@")
        password.send_keys(Keys.RETURN)
        WebDriverWait(driver, 10).until(EC.url_to_be(f"{self.url}/"))
        self.assertEqual(driver.current_url,f"{self.url}/")
        print("Login success!")
        
    def test_sign_in_fail(self):
        driver = self.driver
        driver.get(f"{self.url}/sign-in")
        self.assertIn("Gbox", driver.title)
        # nhap username va password
        username = driver.find_element(By.ID, ":R2rbrrpla:-form-item")
        password = driver.find_element(By.ID, ":R4rbrrpla:-form-item")
        username.send_keys("tronglinh230203@gmail.com")
        password.send_keys("Linh123456")
        password.send_keys(Keys.RETURN)
        self.assertEqual(driver.current_url,f"{self.url}/sign-in")
        print("Login fail!")

    def test_sign_up_success(self):
    
    def test_sign_up_fail(self):
        
    def test_forgot_password_success(self):
    
    def test_forgot_password_fail(self):

    def tearDown(self):
        self.driver.close()

if __name__ == "__main__":
    unittest.main()


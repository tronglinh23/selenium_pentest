import unittest
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pickle
import warnings


class PythonOrgSearch(unittest.TestCase):

    def setUp(self):
        warnings.filterwarnings(action="ignore", message="unclosed", category=ResourceWarning)
        self.options = webdriver.ChromeOptions()
        self.options.add_argument('--ignore-certificate-errors')
        self.options.add_argument('--allow-running-insecure-content')
        self.options.add_experimental_option('detach', True)
        self.driver = webdriver.Chrome(options=self.options)
        self.url = "https://gbox-platform.vercel.app"

    def test_sign_in_success(self):
        driver = self.driver
        driver.get(f"{self.url}/sign-in")
        self.assertIn("Gbox", driver.title)
        
        # nhap username va password
        username = driver.find_element(By.ID, ":R2rbrrpla:-form-item")
        password = driver.find_element(By.ID, ":R4rbrrpla:-form-item")
        username.send_keys("tronglinh230203@gmail.com")
        password.send_keys("Linh123456@")
        password.send_keys(Keys.RETURN)
        WebDriverWait(driver, 10).until(EC.url_to_be(f"{self.url}/"))
        self.assertEqual(driver.current_url,f"{self.url}/")
        self.cookies = driver.get_cookies()
        print("Login success!")
        
    def test_sign_in_fail(self):
        driver = self.driver
        driver.get(f"{self.url}/sign-in")
        self.assertIn("Gbox", driver.title)
        # nhap username va password
        username = driver.find_element(By.ID, ":R2rbrrpla:-form-item")
        password = driver.find_element(By.ID, ":R4rbrrpla:-form-item")
        username.send_keys("tronglinh230203@gmail.com")
        password.send_keys("Linh123456")
        password.send_keys(Keys.RETURN)
        self.assertEqual(driver.current_url,f"{self.url}/sign-in")
        print("Login fail!")

    def test_sign_up_success(self):
        driver = self.driver
        driver.get(f"{self.url}/sign-up")
        self.assertIn("Gbox", driver.title)
        # nhap email va 2 lan mat khau
        email = driver.find_element(By.ID, ":R4rbrrpla:-form-item")
        password = driver.find_element(By.ID, ":R6rbrrpla:-form-item")
        cfPassword = driver.find_element(By.ID, ":R8rbrrpla:-form-item")
        email.send_keys("livox57956@marksia.com")
        password.send_keys("Linh123456@")
        cfPassword.send_keys("Linh123456@")
        cfPassword.send_keys(Keys.RETURN)
        WebDriverWait(driver, 10).until(EC.url_to_be(f"{self.url}/"))
        self.assertEqual(driver.current_url,f"{self.url}/")
        print("Sign up success!")
          
    def test_sign_up_fail_1(self):
        driver = self.driver
        driver.get(f"{self.url}/sign-up")
        self.assertIn("Gbox", driver.title)
        # nhap email va 2 lan mat khau
        email = driver.find_element(By.ID, ":R4rbrrpla:-form-item")
        password = driver.find_element(By.ID, ":R6rbrrpla:-form-item")
        cfPassword = driver.find_element(By.ID, ":R8rbrrpla:-form-item")
        
        # email da ton tai
        email.send_keys("livox57956@marksia.com")
        password.send_keys('Linh123456@')
        cfPassword.send_keys('Linh123456@')
        cfPassword.send_keys(Keys.RETURN)
        try:
            element = WebDriverWait(driver, 10).until(
                EC.text_to_be_present_in_element((By.TAG_NAME, "body"), "User already registered")
            )
            print("Sign-up failed. User already exists.")
        except:
            print("Error")
        
        self.assertIn("User already registered", driver.page_source)
        
    def test_sign_up_fail_2(self):
        driver = self.driver
        driver.get(f"{self.url}/sign-up")
        self.assertIn("Gbox", driver.title)
        # nhap email va 2 lan mat khau
        email = driver.find_element(By.ID, ":R4rbrrpla:-form-item")
        password = driver.find_element(By.ID, ":R6rbrrpla:-form-item")
        cfPassword = driver.find_element(By.ID, ":R8rbrrpla:-form-item")
        
        # email da ton tai
        email.send_keys("livox57956@marksia.com")
        password.send_keys('Linh123456@')
        cfPassword.send_keys('Linh123456@1')
        cfPassword.send_keys(Keys.RETURN)
        try:
            element = WebDriverWait(driver, 10).until(
                EC.text_to_be_present_in_element((By.TAG_NAME, "body"), "Passwords don't match")
            )
            print("Sign-up failed. Passwords don't match")
        except:
            print("Error")
        
        self.assertIn("Passwords don't match", driver.page_source)

    def tearDown(self):
        self.driver.close()

if __name__ == "__main__":
    service = unittest.main()
    service.close()

